services:
  launchers:
    build: collections/launchers/
    container_name: launchers_container
    environment:
      - DBCONF_URL=postgres://${DBCONF_USER}:${DBCONF_PASS}@dbconf:5432/${DBCONF_NAME}
      - MESSAGES_URL=kafka:9092
    ports:
      - "127.0.0.1:8080:8080"
    healthcheck:
      test: echo 0
      interval: 2s
      timeout: 5s
      retries: 10
    depends_on:
      dbconf:
        condition: service_healthy
      kafka:
        condition: service_healthy

  stdcollector:
    build: collections/stdcollector/
    container_name: std_collector_container
    environment:
      - TOPIC_NAME=stdcollector
      - MESSAGES_URL=kafka:9092
      - DBCONF_URL=postgres://${DBCONF_USER}:${DBCONF_PASS}@dbconf:5432/${DBCONF_NAME}
    depends_on:
      kafka:
        condition: service_healthy
      launchers:
        condition: service_healthy


  interactions:
    build: interactions/
    container_name: interface_container
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - SESSION_SECRET=${SESSION_SECRET}
      - REDIS_URL=redis://default:${REDIS_STORE_PASSWORD}@sessions_store:6379/0
    depends_on:
      dbconf:
        condition: service_healthy
      sessions_store:
        condition: service_healthy


  dbconf:
    image: postgres
    restart: always
    container_name: dbconf_container
    volumes:
        - ./storage/selections/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${DBCONF_USER}
      POSTGRES_PASSWORD: ${DBCONF_PASS}
      POSTGRES_DB: ${DBCONF_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DBCONF_NAME} -U ${DBCONF_USER}"]
      start_period: 5s
      interval: 2s
      timeout: 5s
      retries: 10


  sessions_store:
    image: redis:latest
    restart: always
    command: /bin/sh -c "redis-server --requirepass ${REDIS_STORE_PASSWORD}"
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -u redis://default:${REDIS_STORE_PASSWORD}@sessions_store:6379/0 ping"]
      start_period: 5s
      interval: 1s
      timeout: 3s
      retries: 10


  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=TRUE
    healthcheck:
      test: kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --create --if-not-exists && kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --describe
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 5